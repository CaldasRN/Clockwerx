{"version":3,"sources":["redux/mapReduxStoreToProps.js","api.js","components/Countdown.js","components/MasterCountdown.js","components/TimerInput.js","App.js","redux/reducers/countdownTimers.reducer.js","redux/reducers/currentTime.reducer.js","redux/reducers/masterTime.reducer.js","redux/store.js","index.js"],"names":["mapReduxStoreToProps","reduxState","store","api","baseAxios","axios","create","baseURL","postObj","this","get","time","concat","hours","minutes","seconds","fulltime","timerTime","id","stop","pause","on","power","bright","sync","mil","Countdown","state","timerOn","timerStart","timerID","inputHrs","inputMin","inputSec","preStart","_this","setState","props","currentTime","Api","postTime","_objectSpread","then","response","window","setTimeout","startTimer","catch","error","console","log","timer","setInterval","newTime","clearInterval","alert","stopTimer","resetTimer","resetMasterCallback","_this$state","disableButtons","clockIP","ip","clockID","masterTime","timerCount","Math","floor","slice","react_default","a","createElement","className","onClick","disabled","Component","connect","MasterCountdown","dispatch","type","payload","apiArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","countdownTimers","Symbol","iterator","next","done","clock","value","apiObj","MasterCountdown_objectSpread","status","push","err","return","Promise","all","createTimerInterval","holdTimer","resumeTimer","_this2","TimerInput","changeInputTime","event","timeKey","newState","parseInt","target","toUpperCase","onChange","required","App","indvTimer","allTimers","masterStart","startAll","timeObj","startIndvCountdown","countdownIndex","timeConv","timersArray","Object","toConsumableArray","timers","resetMaster","rmClocks","map","index","components_Countdown","key","components_TimerInput","components_MasterCountdown","React","defaultCounntdowns","arguments","length","action","defaultCurrentTime","addTimeToState","currState","timeValue","timeAsNumber","timeDoubleDigit","timeStr","doubleDigit","makeTimeDoubleDigit","newTimeState","currentTime_reducer_objectSpread","baseTime","timeType","finalTime","conversion","timeConverter","newStateHrs","newStateMin","newStateSec","masterTime_reducer_objectSpread","createStore","combineReducers","store_objectSpread","allReducers","applyMiddleware","logger","ReactDom","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1ab7f6d9.chunk.js","sourcesContent":["const mapReduxStoreToProps = reduxState => ({\n    store: reduxState,\n});\n\nexport default mapReduxStoreToProps;","import axios from 'axios';\n\nclass Api {\n    baseAxios = axios.create({\n        baseURL: 'http://192.168.12.140/clocksapp'\n    });\n\n    // Create another method for Master if changes are too extensive or if new api call is needed\n    postTime (postObj) {\n        return this.baseAxios.get(`/timer`, {\n            time: `${postObj.hours}:${postObj.minutes}:${postObj.seconds}`,\n            fulltime: postObj.timerTime,\n            id: postObj.id,\n            stop: false,\n            pause: false\n            // Send time to start\n            // Set stop: true or false\n            // set pause: true of false\n        });\n    }\n    postPower (postObj) {\n        return this.baseAxios.get(`/powerBtn`, {\n            on: postObj.power\n        });\n    }\n    postBright (postObj) {\n        return this.baseAxios.get(`/dim`, {\n            bright: postObj.bright\n        });\n    }\n    postSync (postObj) {\n        return this.baseAxios.get(`/sync`, {\n            sync: postObj.sync\n        });\n    }\n    postMil (postObj) {\n        return this.baseAxios.get(`/milTime`, {\n            mil: postObj.mil\n        });\n    }\n};\n\nexport default new Api();","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport mapReduxStoreToProps from '../redux/mapReduxStoreToProps';\nimport Api from '../api';\n\nclass Countdown extends Component {\n  state = {\n    timerOn: false,\n    timerStart: 0,\n    timerTime: 0,\n    timerID: '',\n    inputHrs: 0,\n    inputMin: 0,\n    inputSec: 0,\n  };\n\n  preStart = () => {\n    this.setState({\n      timerTime: this.props.store.currentTime.timerTime,\n    }, () => {\n      // Setting up post for api call, needs to match endpoint titles and information\n      Api.postTime({\n        ...this.props.store.currentTime,\n        id: this.props.id,\n        stop: 'false',\n        pause: 'false',\n      })\n      // Then is a response to make sure that it was successful to hit api\n      .then((response) => {\n        window.setTimeout(() => {\n          this.startTimer()\n        }, 2000);\n      })\n      // Catch is an error... its just an error\n      .catch((error) => {\n        console.log(error);\n      });\n      // TODO: Remove when endpoints are working\n      window.setTimeout(() => {\n        this.startTimer()\n      }, 2000);\n    });\n  }\n\n  startTimer = () => {\n    // TODO: Use npm install \"axios\" for ajax call to backend\n    this.setState({\n      timerOn: true,\n      timerStart: this.state.timerTime\n    });\n    \n    this.timer = setInterval(() => {\n      const newTime = this.state.timerTime - 10;\n      if (newTime >= 0) {\n        this.setState({\n          timerTime: newTime\n        });\n      } else {\n        clearInterval(this.timer);\n        this.setState({ timerOn: false });\n        alert(\"Countdown Ended\");\n      }\n    }, 10);\n  };\n\n  // Create separate call for for stop and pause as they have two separate API functions\n\n  stopTimer = () => {\n    this.setState({\n      timerOn: false\n    }, () => {\n      // Setting up post for api call, needs to match endpoint titles and information\n      Api.postTime({\n        stop: 'true',\n      })\n      // Then is a response to make sure that it was successful to hit api\n      .then((response) => {\n        clearInterval(this.timer);\n      })\n      // Catch is an error... its just an error\n      .catch((error) => {\n        console.log(error);\n      });\n      // TODO: Remove when endpoints are working\n      clearInterval(this.timer);\n      this.setState({ timerOn: false });\n    });\n  };\n\n  resetTimer = () => {\n    this.setState({\n      timerTime: this.state.timerStart\n    }, () => {\n      // Setting up post for api call, needs to match endpoint titles and information\n      Api.postTime({\n        ...this.props.store.currentTime,\n        id: this.props.id,\n        stop: 'false',\n        pause: 'false',\n      })\n      // Then is a response to make sure that it was successful to hit api\n      .then((response) => {\n        clearInterval(this.timer);\n      })\n      // Catch is an error... its just an error\n      .catch((error) => {\n        console.log(error);\n      });\n    });\n  };\n\n  startForMaster() {\n    this.props.resetMasterCallback();\n    this.preStart();\n  }\n\n  render() {\n    let { timerTime, timerStart, timerOn } = this.state;\n    let disableButtons = false;\n    let clockIP = this.props.ip;\n    let clockID = this.props.id;\n\n    if (this.props.store.masterTime.timerOn === true) {\n      timerTime = this.props.store.masterTime.timerCount;\n      timerStart = this.props.store.masterTime.timerStart;\n      timerOn = this.props.store.masterTime.timerOn;\n      disableButtons = true;\n    }\n    \n    let seconds = (\"0\" + (Math.floor((timerTime / 1000) % 60) % 60)).slice(-2);\n    let minutes = (\"0\" + Math.floor((timerTime / 60000) % 60)).slice(-2);\n    let hours = (\"0\" + Math.floor((timerTime / 3600000) % 60)).slice(-2);\n\n    console.log(clockIP, 'testing IP');\n    return (\n      <div id={clockID} className=\"roomClock\">\n        <div className=\"roomClock-hd\">{clockID}</div>\n        <div className=\"roomClock-bd\">\n          <div className=\"timer\">\n            <div className=\"timer-display\">\n              {hours} : {minutes} : {seconds}\n            </div>\n            <div className=\"timer-control\">\n              {timerOn === false &&\n                (timerStart === 0 || timerTime === timerStart) && (\n                  <button className=\"btn btn_start\" onClick={this.preStart} disabled={disableButtons}>Start</button>\n                )}\n              {timerOn === true && timerTime >= 1000 && (\n                <button className=\"btn btn_stop\" onClick={this.stopTimer} disabled={disableButtons}>Stop</button>\n              )}\n              {timerOn === false &&\n                (timerStart !== 0 && timerStart !== timerTime && timerTime !== 0) && (\n                  <button className=\"btn btn_start\" onClick={this.startTimer} disabled={disableButtons}>Resume</button>\n                )}\n              {(timerOn === false || timerTime < 1000) && (\n                <button className=\"btn btn_reset\" onClick={this.resetTimer} disabled={disableButtons}>Reset</button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapReduxStoreToProps)(Countdown);\n","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport mapReduxStoreToProps from '../redux/mapReduxStoreToProps';\nimport Api from '../api';\n\nclass MasterCountdown extends Component {\n    createTimerInterval () {\n        this.timer = setInterval(() => {\n            const newTime = this.props.store.masterTime.timerCount - 10;\n            if (newTime >= 0) {\n                this.props.dispatch({\n                    type: 'MASTER_TIMER_COUNT',\n                    payload: newTime\n                });\n            } else {\n                clearInterval(this.timer);\n                this.props.dispatch({ \n                    type: 'MASTER_TIMER_ON',\n                    payload: false\n                });\n                alert(\"Master Countdown Ended\");\n            }\n        }, 10);\n    };\n    \n    startTimer = () => {\n        this.props.dispatch({\n            type: 'MASTER_TIMER_SET_ALL',\n            payload: {\n                timerOn: true,\n                timerCount: this.props.store.currentTime.timerTime,\n                timerStart: this.props.store.currentTime.timerTime\n            }\n        });\n        // Creates Promises for all clocks if different endpoints are needed\n        // Hope only one endpoint is needed\n        // First create empty array\n        const apiArray = [];\n        // Fill using a for loop\n        for (let clock of this.props.store.countdownTimers) {\n            const apiObj = {\n                ...this.props.store.currentTime,\n                id: clock.id,\n                status: 'start'\n            };\n            apiArray.push(Api.postTime(apiObj));\n        }\n        // Send promise for all\n        Promise.all(apiArray)\n            // Then is a response to make sure that it was successful to hit api\n            .then((response) => {\n                window.setTimeout(() => {\n                this.startTimer()\n                }, 2000);\n            })\n            // Catch is an error... its just an error\n            .catch((error) => {\n                console.log('Error on preStart for Countdown.js', error);\n            });\n        // Controls timing delay for clock start\n        window.setTimeout(() => {\n            this.createTimerInterval();        \n        }, 2000);\n    };\n\n    holdTimer = () => {\n        clearInterval(this.timer);\n        this.props.dispatch({\n            type: 'MASTER_TIMER_SET_ALL',\n            payload: {\n                timerOn: true,\n                timerCount: this.props.store.currentTime.timerTime,\n                timerStart: this.props.store.currentTime.timerTime   \n            }\n        });\n    };\n    \n    stopTimer = () => {\n        clearInterval(this.timer);\n        this.props.dispatch({ \n            type: 'MASTER_TIMER_ON',\n            payload: false\n        });\n    };\n\n    resetTimer = () => {\n        this.props.dispatch({\n            type: 'MASTER_TIMER_COUNT',\n            payload: this.props.store.masterTime.timerStart\n        });\n    };\n\n    resumeTimer = () => {\n        this.props.dispatch({\n            type: 'MASTER_TIMER_ON',\n            payload: true\n        });\n        this.createTimerInterval();\n    }\n\n    render (){\n        return (\n            <div>\n                <button onClick={this.startTimer}>Start</button>\n                <button onClick={this.holdTimer}>Hold</button>\n                <button onClick={this.stopTimer}>Stop</button>\n                <button onClick={this.startTimer}>Resume</button>\n                <button onClick={this.resetTimer}>Reset</button>\n            </div>\n        );\n    }\n}\nexport default connect(mapReduxStoreToProps)(MasterCountdown);","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport mapReduxStoreToProps from '../redux/mapReduxStoreToProps';\n\nclass TimerInput extends Component {\n  state = {\n    inputHrs: 0,\n    inputMin: 0,\n    inputSec: 0\n  };\n\n  changeInputTime = (event, timeKey) => {\n    const newState = this.state;\n    newState[timeKey] = parseInt(event.target.value);\n    this.setState(newState);\n\n    this.props.dispatch({\n      type: `CURRENT_TIME_${timeKey.toUpperCase()}`,\n      payload: event.target.value,\n    })\n  };\n\n  render() {\n    return (\n      <div className=\"form\">\n        <input\n          type=\"number\"\n          onChange={event => this.changeInputTime(event, \"hours\")}\n          className=\"field-item field-item_hrs\"\n          required\n        />\n        <input\n          type=\"number\"\n          onChange={event => this.changeInputTime(event, \"minutes\")}\n          className=\"field-item field-item_min\"\n          required\n        />\n        <input\n          type=\"number\"\n          onChange={event => this.changeInputTime(event, \"seconds\")}\n          className=\"field-item field-item_sec\"\n          required\n        />\n      </div>\n    );\n  }\n}\n\nexport default connect(mapReduxStoreToProps)(TimerInput);\n","import React, { Component } from \"react\";\nimport Countdown from \"./components/Countdown\";\nimport MasterCountdown from \"./components/MasterCountdown\";\nimport TimerInput from \"./components/TimerInput\";\nimport { connect } from 'react-redux';\nimport mapReduxStoreToProps from './redux/mapReduxStoreToProps';\n\nclass App extends React.Component {\n  state = {\n    indvTimer: 0,\n    allTimers: 0,\n    currentTime: 0,\n    masterStart: false\n  };\n\n  // setTimer = timeObj => {\n  //   this.setState({\n  //     indvTimer: `${timeObj.inputHrs}:${timeObj.inputMin}:${timeObj.inputSec}`,\n  //     currentTime: timeObj\n  //   });\n  // };\n\n  startAll = timeObj => {\n    this.setState({\n      allTimers: `${timeObj.inputHrs}:${timeObj.inputMin}:${timeObj.inputSec}`,\n      masterStart: true\n    });\n  };\n\n  startIndvCountdown = (countdownIndex, timeConv) => {\n    const timersArray = [...this.state.timers];\n    timersArray[countdownIndex] = timeConv;\n    this.setState({ timers: timersArray });\n  };\n\n  resetMaster = () => {\n    this.setState({\n      masterStart: false\n    })\n  }\n\n  render() {\n    const {\n      store,\n    } = this.props;\n    const rmClocks = store.countdownTimers.map((timers, index) => {\n      return (\n        <Countdown\n          id={timers.id}\n          masterStart={this.state.masterStart}\n          resetMasterCallback={this.resetMaster}\n          key={index}\n          index={index} \n        />\n      );\n    });\n    return (\n      <div className=\"appBody\">\n        <div className=\"appBody-hd\">\n          <h1 className=\"hdg hdg_max\">ClockWerx</h1>\n          <h2 className=\"hdg hdg_3\">Events clock timer control</h2>\n        </div>\n        <div className=\"appBody-bd appBody-bd_split\">\n          <div className=\"grid\">\n            <div className=\"grid-col grid-col_5of12\">\n              <div className=\"clockList\">\n                {rmClocks}\n              </div>\n            </div>\n            <div className=\"grid-col grid-col_7of12\">\n              <div className=\"\">\n                <TimerInput\n                  startAll={this.startAll}\n                />\n                <MasterCountdown />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapReduxStoreToProps)(App);\n","const defaultCounntdowns = [\n    {\n        id: 'Auditorium',\n        ip: '192.168.12.143',\n        time: 0,\n    },\n    {\n        id: 'BlackSea',\n        ip: '192.168.12.143',\n        time: 0\n    },\n    {\n        id: 'Marathon',\n        ip: '192.168.12.143',\n        time: 0\n    },\n    {\n        id: 'Tours',\n        ip: '192.168.12.143',\n        time: 0\n    }\n];\n\n// const action = {\n//      type: 'ADD_TIMER',\n//      payload: {\n//         id: 'room03',\n//         time: 0\n//      }\n// }\nconst countdownTimers = (state = defaultCounntdowns, action) => {\n    switch (action.type) {\n        case 'ADD_TIMER':\n            return [ ...state, action.payload ];\n        default:\n            return state;\n    }\n};\n\nexport default countdownTimers;","const defaultCurrentTime = {\n    hours: '00',\n    minutes: '00',\n    seconds: '00',\n    timerTime: 0,\n};\n\nconst currentTime = (state = defaultCurrentTime, action) => {\n    switch (action.type) {\n        case 'CURRENT_TIME_HOURS':\n            const newStateHrs = addTimeToState(state, 'hours', action.payload);\n            console.log(newStateHrs);\n            return newStateHrs;\n        case 'CURRENT_TIME_MINUTES':\n            const newStateMin = addTimeToState(state, 'minutes', action.payload);\n            console.log(newStateMin);\n            return newStateMin;\n        case 'CURRENT_TIME_SECONDS':\n            const newStateSec = addTimeToState(state, 'seconds', action.payload);\n            console.log(newStateSec);\n            return newStateSec;\n        default:\n            return state;\n    }\n}\n\nfunction addTimeToState(currState, timeKey, timeValue) {\n    const timeAsNumber = parseInt(timeValue);\n    const timeDoubleDigit = makeTimeDoubleDigit(timeValue);\n    const newTimeState = {\n        ...currState,\n    };\n    newTimeState[timeKey] = timeDoubleDigit;\n    newTimeState.timerTime = timeConverter(currState.timerTime, timeAsNumber, timeKey);\n    return newTimeState;\n}\n\nfunction makeTimeDoubleDigit(timeStr) {\n    let doubleDigit = '00';\n\n    if (timeStr.length < 2 && timeStr.length !== 0) {\n        doubleDigit = `0${timeStr}`;\n    }\n\n    return doubleDigit;\n}\n\n//TODO: Can remove baseTime from function\nfunction timeConverter(baseTime, newTime, timeType) {\n    let finalTime = 0;\n    let conversion = 1;\n\n    if (timeType === 'hours') {\n        conversion = 1000 * 60 * 60;\n    } else if (timeType === 'minutes') {\n        conversion = 1000 * 60;\n    } else if (timeType === 'seconds') {\n        conversion = 1000;\n    }\n    finalTime = finalTime + (newTime * conversion);\n\n    return finalTime;\n}\n\nexport default currentTime;","const masterTime = (state = {}, action) => {\n    // Update Timer count\n    switch (action.type) {\n        case 'MASTER_TIMER_COUNT':\n            return {\n                ...state,\n                timerCount: action.payload\n            };\n        case 'MASTER_TIMER_ON':\n            return {\n                ...state,\n                timerOn: action.payload\n            };\n        case 'MASTER_TIMER_START':\n            return {\n                ...state,\n                timerStart: action.payload\n            }\n        case 'MASTER_TIMER_SET_ALL':\n            return {\n                ...state,\n                timerCount: action.payload.timerCount,\n                timerOn: action.payload.timerOn,\n                timerStart: action.payload.timerStart\n            }\n        default:\n            return state;\n    }\n    \n    return state;\n}\n\nexport default masterTime;","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport * as allReducers from './reducers/all.reducers';\n\nconst store = createStore(\n    combineReducers({\n        ...allReducers,\n    }),\n    applyMiddleware(logger),\n);\n\nexport default store;","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport { Provider } from 'react-redux';\nimport App from \"./App\";\nimport \"./styles.scss\";\nimport store from './redux/store';\n\n// ========================================\n\nReactDom.render(<Provider store={store}><App /></Provider>, document.getElementById(\"root\"));\n"],"sourceRoot":""}